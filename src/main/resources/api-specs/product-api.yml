openapi: 3.0.0
info:
  title: Product API
  description: API for managing products in an online shop
  version: 1.0.0

paths:
  /api/v1/products:
    get:
      summary: Get all products
      tags: [Products]
      responses:
        '200':
          description: List of all products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDto'

    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        description: Product data to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestDto'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/products/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update existing product
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to update
      requestBody:
        description: Product data to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequestDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    CreateProductRequestDto:
      type: object
      required:
        - name
        - description
        - category
        - price
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the product (mandatory, 3-100 characters)
        description:
          type: string
          minLength: 10
          maxLength: 255
          description: Description of the product (mandatory, 10-255 characters)
        category:
          type: string
          minLength: 3
          maxLength: 80
          description: Category of the product (mandatory, 3-80 characters; will be enum in future)
        price:
          type: number
          format: double
          minimum: 0.01
          description: Price of the product (mandatory, must be > 0)
        quantity:
          type: integer
          minimum: 0
          description: Stock quantity (zero or positive)

    ProductResponseDto:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier of the product
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          description: Product price
        category:
          type: string
          description: Product category (will be enum in the future)
        stock:
          type: integer
          description: How many products are left in stock

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: "400"
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationErrorDetails'

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error

    ValidationErrorDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error